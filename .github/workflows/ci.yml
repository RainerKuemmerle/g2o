name: CI

on:
  push:
    branches:
      - master
      - pymem
  pull_request:

  release:

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Ubuntu Latest GCC",
            os: ubuntu-latest,
            build_type: "Debug",
            do_coverage: "ON",
          }
        - {
            name: "macOS Latest Clang",
            os: macos-latest,
            build_type: "Debug",
            do_coverage: "OFF",
          }


    steps:
      - uses: actions/checkout@v3
        with:
            fetch-depth: 25

      - name: Print env
        run: |
          echo github.ref: ${{github.ref}}
          echo github.event.action: ${{github.event.action}}
          echo github.event_name: ${{github.event_name}}
          echo runner.os: ${{runner.os}}

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.config.os }}-${{ matrix.config.build_type }}
          max-size: 2000M

      - name: Install dependencies on Ubuntu
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install libeigen3-dev qtdeclarative5-dev qt5-qmake libqglviewer-dev-qt5 libsuitesparse-dev lcov libspdlog-dev

      - name: Install cereal on Ubuntu
        if: runner.os == 'Linux'
        run: |
          cd /tmp
          wget https://github.com/USCiLab/cereal/archive/refs/tags/v1.3.2.tar.gz
          tar xaf v1.3.2.tar.gz
          cd cereal-1.3.2
          mkdir build; cd build
          cmake -DJUST_INSTALL_CEREAL:=On ..
          sudo make install

      - name: Install dependencies on macOS
        if: runner.os == 'macOS'
        run: brew install cmake eigen

      - name: Configure ccache for macOS
        if: runner.os == 'macOS'
        run: |
          # See https://github.com/hendrikmuhs/ccache-action/issues/146
          ccache --set-config=compiler_check=content

      - name: Coverage Configure Build
        if: matrix.config.do_coverage == 'ON'
        run: |
          echo "CFLAGS=--coverage" >> $GITHUB_ENV
          echo "CXXFLAGS=--coverage" >> $GITHUB_ENV

      - name: Configure CMake
        run: |
          cmake --version
          cmake -B ${{github.workspace}}/build -DBUILD_UNITTESTS=ON -DCMAKE_BUILD_TYPE=${{matrix.config.build_type}} -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      - name: Build Introspection
        shell: bash
        run: |
          echo "g2o config.h"
          cat ${{github.workspace}}/build/g2o/config.h
          echo "ENV"
          env | sort

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{matrix.config.build_type}} -j 2

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{matrix.config.build_type}} --extra-verbose --output-on-failure

      - name: Coverage Results
        if: matrix.config.do_coverage == 'ON'
        uses: codecov/codecov-action@v4.2.0
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
